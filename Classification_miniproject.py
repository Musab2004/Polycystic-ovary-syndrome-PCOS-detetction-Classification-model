# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1prax7HyDHVc4dT-aq3v2Qyfgfxj8gTik
"""

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
import lightgbm as lgb
from imblearn.over_sampling import SMOTEN
from sklearn.metrics import roc_curve, auc
import pandas as pd
import numpy as np
def clean_dataset(df):
    assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
    df.dropna(inplace=True)
    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
    return df[indices_to_keep].astype(np.float64)

PCOS_inf = pd.read_excel("PCOS_data_without_infertility.xlsx",sheet_name="Full_new")
PCOS_woinf = pd.read_csv("PCOS_infertility.csv")
PCOS_woinf.loc[:,["Patient File No."]]=PCOS_woinf.loc[:,["Patient File No."]]-10000

PCOS_inf.head()

PCOS_woinf.head()

data = pd.merge(PCOS_woinf,PCOS_inf, on='Patient File No.', suffixes={'','_y'},how='left')
data =data.drop(['Unnamed: 44', 'Sl. No_y', 'PCOS (Y/N)_y', '  I   beta-HCG(mIU/mL)_y',
       'II    beta-HCG(mIU/mL)_y', 'AMH(ng/mL)_y','AMH(ng/mL)'], axis=1)
data.head()
data.info()
clean_dataset(data)

corrmat = data.corr()
corrmat["PCOS (Y/N)"].sort_values(ascending=True)
X=data.drop(["PCOS (Y/N)","Sl. No","AMH(ng/mL)","Patient File No."],axis = 1) #droping out index from features too
y=data["PCOS (Y/N)"]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = \
        train_test_split( \
                         X, y, \
                         test_size = 0.25, \
                         random_state = 0)
        
from sklearn.linear_model import LogisticRegression
lr =LogisticRegression(solver='lbfgs', max_iter=100000)

lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)
from sklearn.metrics import accuracy_score
acc_lr = accuracy_score(y_test, y_pred_lr)
print (acc_lr)
